1. What are the six combinations of access modifier keywords and what do they do?
public: Accessible from anywhere.
private: Accessible only within the containing class.
protected: Accessible within the containing class and by derived classes.
internal: Accessible only within the same assembly.
protected internal: Accessible within the same assembly or by derived classes in other assemblies.
private protected: Accessible within the containing class or by derived classes in the same assembly.


2. What is the difference between the static, const, and readonly keywords when applied to a type member?
static: Belongs to the class, not the instance. Shared among all instances.
const: Compile-time constant. Value cannot be changed.
readonly: Value can only be assigned at declaration or in the constructor. Immutable after initialization.


3. What does a constructor do?
A constructor initializes an instance of a class, setting up initial values for fields or executing initialization code.


4. Why is the partial keyword useful?
The partial keyword allows a class, struct, or interface to be split into multiple files, enabling better organization and collaboration in large projects.


5. What is a tuple?
A tuple is a data structure that can hold multiple values of different types, grouped together.


6. What does the C# record keyword do?
The record keyword defines an immutable reference type with value-based equality, ideal for data models.


7. What does overloading and overriding mean?
Overloading: Defining multiple methods with the same name but different parameter signatures.
Overriding: Providing a new implementation for a virtual or abstract method in a derived class.


8. What is the difference between a field and a property?
Field: Directly stores data.
Property: Provides a controlled mechanism to access or modify fields.


9. How do you make a method parameter optional?
Use a default value: void MyMethod(int param = 0).


10. What is an interface and how is it different from abstract class?
Interface: Defines a contract with no implementation.
Abstract Class: Can define both implementation and abstract members.


11. What accessibility level are members of an interface?
Always public.


12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
True


13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True


14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True


15. True/False. Abstract methods can be used in a normal (non-abstract) class.
False


16. True/False. Normal (non-abstract) methods can be used in an abstract class.
True


17. True/False. Derived classes can override methods that were virtual in the base class.
True

18. True/False. Derived classes can override methods that were abstract in the base class.
True

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
False


20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
Fasle


21. True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface.
True


22. True/False. A class can have more than one base class.
False


23. True/False. A class can implement more than one interface.
True
